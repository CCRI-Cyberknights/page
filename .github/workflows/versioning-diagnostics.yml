name: Versioning Pipeline Diagnostics

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_diagnostics:
        description: 'Run full versioning diagnostics'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  statuses: write
  pull-requests: write

jobs:
  versioning-diagnostics:
    runs-on: ubuntu-latest
    # Skip this workflow for automated release commits to avoid unnecessary delays
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git diagnostics
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run versioning diagnostics
      run: npm run test:links
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: versioning-diagnostics-results
        path: |
          tests/test-results/
          tests/playwright-report/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Comment on PR with diagnostics
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results if available
          let diagnosticsInfo = '## üîç Versioning Pipeline Diagnostics\n\n';
          
          try {
            const resultsPath = path.join(process.cwd(), 'tests', 'test-results', 'versioning-results.json');
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              diagnosticsInfo += `**Test Results:** ${results.stats.passed} passed, ${results.stats.failed} failed\n\n`;
              
              if (results.stats.failed > 0) {
                diagnosticsInfo += '‚ùå **Versioning issues detected!** Please check the test results.\n\n';
              } else {
                diagnosticsInfo += '‚úÖ **Versioning pipeline is healthy!**\n\n';
              }
            }
          } catch (error) {
            diagnosticsInfo += '‚ö†Ô∏è **Could not read test results**\n\n';
          }
          
          diagnosticsInfo += 'Run `npm run version:diagnose` locally to debug versioning issues.\n\n';
          diagnosticsInfo += '**Available diagnostic commands:**\n';
          diagnosticsInfo += '- `npm run test:versioning` - Run all diagnostics\n';
          diagnosticsInfo += '- `npm run test:versioning:debug` - Debug mode\n';
          diagnosticsInfo += '- `npm run test:versioning:ui` - Interactive UI\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: diagnosticsInfo
          });

